services:
  # Metadata db
  postgres-publications:
    image: postgres:17
    ports:
      - "5432:5432"
    volumes:
      - postgres_publications_data:/var/lib/postgresql/data
    networks:
      - platform-network
    environment:
      POSTGRES_DB: publications
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d publications"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # S3 File storage (MinIO)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data
    networks:
      - platform-network
    environment:
      MINIO_ROOT_USER: minioroot
      MINIO_ROOT_PASSWORD: minioroot
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:4.0
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/bitnami
    networks:
      - platform-network
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: >-
        PLAINTEXT://:29092,
        PLAINTEXT_HOST://:9092,
        CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: >-
        PLAINTEXT://kafka:29092,
        PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: >-
        PLAINTEXT:PLAINTEXT,
        PLAINTEXT_HOST:PLAINTEXT,
        CONTROLLER:PLAINTEXT

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8090:8080"
    networks:
      - platform-network
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

  redis:
    image: redis:7.4.5-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "20", "1", "--loglevel", "notice", "--requirepass", "redis"]
    volumes:
      - cache:/data
    networks:
      - platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_publications_data:
    driver: local
  minio_data:
    driver: local
  kafka_data:
    driver: local
  cache:
    driver: local

networks:
  platform-network:
    driver: bridge